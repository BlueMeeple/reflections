How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The diff confines the search to a small number of lines.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It would allow you to associate changes in the functionality and performance
    of the program with changes to the code.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pro: commit points make sense (e.g. any saved code should compile)
    Con: can lose work if you go for long periods without saving

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is designed for code, thus it's important to save changes to different
    files transactionally.
    GDocs is designed for human readable docs, thus transactional save is not
    as important.

How can you use the commands git log and git diff to view the history of files?

    Git log shows every commit, git diff diffs two of those commits.

How might using version control make you more confident to make changes that
could break something?

    If you break something, it's easy to undo the change.

Now that you have your workspace set up, what do you want to try using Git for?

    Simple version control.
